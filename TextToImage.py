from time import sleep
from typing import Optional, Union
import requests
import json
import os
from werkzeug.utils import secure_filename
from . import ApiKeyNotFoundError


class ApiKeyExhaustedError(Exception):
    pass


class ImageDownloadError(Exception):
    pass


class TextToImage:
    """
    Generates image from a given text prompt

    ### To get started
    ```
    tti = TextToImage(<Your api key here>)
    tti.generate_image("image of a cat","/output")
    ```

    """

    ___URL = "https://api.imagepipeline.io/sdxl/text2image/v1"
    ___headers = {
        "Content-Type": "application/json",
    }
    ___data = {
        # "model_id":"04b396d1-6d7f-4348-98c4-eabe73a3bed6",
        # "model_id":  "a0a4bfa3-2879-4be2-8e98-3d71e041432d",
        "model_id": "48fe63ec-594a-4cfb-804c-dacc692cff5c",
        "prompt": "",
        "negative_prompt": "error, cropped, worst quality, low quality, duplicate, bad proportions, incomplete subject",
        "num_inference_steps": 30,
        "refiner": "true",
        "samples": 1,
        "guidance_scale": 7.5,
        "width": 768,
        "height": 768,
        "safety_checker": "true",
        "scheduler": "UniPCMultistepScheduler",
    }

    def __init__(self, api_key: str) -> None:
        """
        Args:
            api_key: imagepipeline.io api key
        """
        self.___set_api_key(api_key)

    def ___set_api_key(self, api_key: str) -> None:
        """
        Sets the api-key in the header
        Args:
            api_key: imagepipeline.io api key

        Raises:
            ApiKeyNotFoundError: if api_key given is None
        """
        if api_key:
            self.___headers["API-Key"] = api_key
        else:
            raise ApiKeyNotFoundError("No API key was given.")

    def ___pending_image(self, id: int) -> str:
        """
        Checks if the image is being generated

        Args:
            id: pending id generated by api after accepting the image generation request

        Raises:
            ImageDownloadError: if response from api does not have image download links

        Returns:
            img_url: Link of the downloadable generated image

        """
        pending_img_url = f"https://api.imagepipeline.io/sdxl/text2image/v1/status/{id}"

        response = requests.get(pending_img_url, headers=self.___headers)
        while response.json().get("status") == "PENDING":
            response = requests.get(pending_img_url, headers=self.___headers)
            sleep(1)

        result = response.json()

        if result.get("download_urls") == None:
            raise ImageDownloadError(result.get("error"))

        img_url = result["download_urls"][0]

        return img_url

    def ___download_image(self, img_url: str, id: int, dir_path: str) -> str:
        """
        Downloads the image in the specified url

        Args:
            img_url: Link of the downloadable generated image
            id: pending id generated by api after accepting the image generation request
            dir_path: path of the directory where images will be saved

        Raises:
            ImageDownloadError: if api responds with a status code other than 200

        Returns:
            img_file: name of the downloaded image file
        """

        response = requests.get(img_url, headers=self.___headers)

        if response.status_code == 200:
            generated_img = response.content
            img_file = str(id) + ".png"
        else:
            raise ImageDownloadError(
                f"Failed to download image api responded with a status code of {response.status_code}"
            )

        if not (os.path.exists(dir_path)):
            os.makedirs(dir_path)

        img_file = secure_filename(img_file)
        image_path = os.path.join(dir_path, img_file)

        with open(image_path, "wb") as f:
            f.write(generated_img)

        return img_file

    def generate_image(
        self,
        prompt: str,
        dir_path: str,
        negative_prompt: Optional[str] = None,
        seed: Optional[int] = None,
    ) -> str:
        """
        Generates an image for the given text prompt

        Args:
            prompt: text-prompt for image generation
            dir_path: path of the directory where images will be saved
            negative_prompt: text-prompt specifiying what should be avoided in image
            seed: an integer value which makes the model generate reproducible results

        Raises:
            ApiKeyExhaustedError: if API key provided has been exhausted

        Returns:
            img_file: name of the generated image file
        """

        self.___data["prompt"] = prompt

        if negative_prompt:
            self.___data["negative_prompt"] = negative_prompt

        if seed:
            self.___data["seed"] = seed

        response = requests.request(
            "POST", self.___URL, headers=self.___headers, data=json.dumps(self.___data)
        )
        json_response = response.json()


        if response.status_code == 402:
            raise ApiKeyExhaustedError(
                "The API key provided has been exhausted, please try with a different API key or purchase a subscription."
            )
        
        try:
            if json_response["status"] == "PENDING":
                img_url = self.___pending_image(json_response["id"])
        except KeyError:
                print(json_response)

        img_file = self.___download_image(img_url, json_response["id"], dir_path)

        return img_file
